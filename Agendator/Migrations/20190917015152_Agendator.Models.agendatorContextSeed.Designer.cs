// <auto-generated />
using System;
using Agendator.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Agendator.Migrations
{
    [DbContext(typeof(agendatorContext))]
    [Migration("20190917015152_Agendator.Models.agendatorContextSeed")]
    partial class AgendatorModelsagendatorContextSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.Client_ID_seq", "'Client_ID_seq', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.Employee_ID_seq", "'Employee_ID_seq', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.Role_ID_seq", "'Role_ID_seq', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.Schedule_ID_seq", "'Schedule_ID_seq', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.Specialty_ID_seq", "'Specialty_ID_seq', '', '1', '1', '', '', 'Int32', 'False'");

            modelBuilder.Entity("Agendator.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasDefaultValueSql("nextval('main.\"Client_ID_seq\"'::regclass)");

                    b.Property<string>("Email")
                        .HasColumnType("character varying");

                    b.Property<string>("CellPhone")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int>("Password");

                    b.Property<int>("Role");

                    b.HasKey("Id", "Email")
                        .HasName("pk_Client");

                    b.HasIndex("Role");

                    b.ToTable("Client","main");
                });

            modelBuilder.Entity("Agendator.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasDefaultValueSql("nextval('main.\"Employee_ID_seq\"'::regclass)");

                    b.Property<string>("Email")
                        .HasColumnType("character varying");

                    b.Property<TimeSpan>("AppointmentTime")
                        .HasColumnType("time without time zone");

                    b.Property<decimal>("AppointmentValue")
                        .HasColumnType("money");

                    b.Property<string>("CellPhone")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<TimeSpan>("EndWorkTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int>("Password");

                    b.Property<int>("Role");

                    b.Property<int>("Specialty");

                    b.Property<TimeSpan>("StartWorkTime")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id", "Email")
                        .HasName("pk_Employee");

                    b.HasIndex("Role");

                    b.HasIndex("Specialty");

                    b.ToTable("Employee","main");
                });

            modelBuilder.Entity("Agendator.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasDefaultValueSql("nextval('main.\"Role_ID_seq\"'::regclass)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("Role","main");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "admin"
                        });
                });

            modelBuilder.Entity("Agendator.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasDefaultValueSql("nextval('main.\"Schedule_ID_seq\"'::regclass)");

                    b.Property<TimeSpan>("AppointmentEndTime")
                        .HasColumnType("time without time zone");

                    b.Property<TimeSpan>("AppointmentStartTime")
                        .HasColumnType("time without time zone");

                    b.Property<DateTime>("Appointmentdate")
                        .HasColumnName("appointmentdate")
                        .HasColumnType("date");

                    b.Property<bool>("Canceled");

                    b.Property<string>("CanceledReason")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int>("ClientId")
                        .HasColumnName("ClientID");

                    b.Property<decimal>("Discount")
                        .HasColumnType("money");

                    b.Property<int>("DoctorId")
                        .HasColumnName("DoctorID");

                    b.Property<decimal>("ExpectedPrice")
                        .HasColumnType("money");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("Schedule","main");
                });

            modelBuilder.Entity("Agendator.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasDefaultValueSql("nextval('main.\"Specialty_ID_seq\"'::regclass)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("Specialty","main");
                });

            modelBuilder.Entity("Agendator.Models.Client", b =>
                {
                    b.HasOne("Agendator.Models.Role", "RoleNavigation")
                        .WithMany("Client")
                        .HasForeignKey("Role")
                        .HasConstraintName("fk_Client_Role");
                });

            modelBuilder.Entity("Agendator.Models.Employee", b =>
                {
                    b.HasOne("Agendator.Models.Role", "RoleNavigation")
                        .WithMany("Employee")
                        .HasForeignKey("Role")
                        .HasConstraintName("fk_Employee_Role");

                    b.HasOne("Agendator.Models.Specialty", "SpecialtyNavigation")
                        .WithMany("Employee")
                        .HasForeignKey("Specialty")
                        .HasConstraintName("fk_Employee_Specialty");
                });
#pragma warning restore 612, 618
        }
    }
}
